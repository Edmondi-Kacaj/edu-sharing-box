---
- name: Ensures backup_path dir exists
  file: path='{{ backup_path }}' state=directory
  tags:
    - backup-alfresco-data

- name: Backup alfresco database
  no_log: true
  shell: |
    PGPASSWORD="{{alfresco_db.password}}" pg_dump -h localhost -U {{alfresco_db.user}}  {{alfresco_db.name}}  --serializable-deferrable | gzip > {{backup_path}}/{{alfresco_db.name}}-dump.sql.gz
  tags:
    - backup-alfresco-data

- name: Create the 3_datamigration-common.yml for database migration.
  template:
    src: 3_datamigration-common.yml.j2
    dest: "{{ edu_docker_inst_dir }}/3_datamigration-common.yml"
    mode: "600"
  tags:
    - migration-alfresco-sql

- name: Add the migration for database migration.
  blockinfile:
    path: "{{ edu_docker_inst_dir }}/docker-compose.override.yml"
    block: |2
        repository-database:
           volumes:
             - "{{ backup_path }}/{{ alfresco_db.name }}-dump.sql.gz:/docker-entrypoint-initdb.d/psqldump.sql.gz"
    insertafter: '^\s*services:$'
    marker: ""
  when: edu_version is defined and  edu_version is version_compare('8.0.0','>=')
  tags:
    - migration-alfresco-sql

- name: Launch edu-sharing in docker.
  command:
    chdir: "{{ edu_docker_inst_dir }}"
    cmd: "{{edu_sharing_deploy_command}}"
  no_log: true

- name: Get the path to the alfresco docker volume.
  shell: |
    sg docker -c "docker volume inspect --format '{{ '{{' }}.Mountpoint{{ '}}' }}'  $(sg docker -c "docker volume ls -q |grep '_repository-service-volume-data'")"
  register: alfresco_volume_data
  ignore_errors: true
  tags:
    - migration-alfresco-data

- name: Get stats of the alfresco docker volume
  become: yes
  stat:
    path: "{{alfresco_volume_data.stdout}}"
  when: alfresco_volume_data.stdout != ""
  register: alfresco_volume_data_stats
  tags:
    - migration-alfresco-data

- name: Copy alfresco data  to alfresco volume.
  become: yes
  copy:
    src: "{{ alf_home}}/alf_data/"
    dest: "{{alfresco_volume_data.stdout}}"
    mode: "{{alfresco_volume_data_stats.stat.mode}}"
    owner: "{{alfresco_volume_data_stats.stat.uid}}"
    group: "{{alfresco_volume_data_stats.stat.gid}}"
  when: (alfresco_volume_data.stdout is defined and alfresco_volume_data.stdout != "") and 
        (alfresco_volume_data_stats.stat.isdir is defined and alfresco_volume_data_stats.stat.isdir)
  tags:
    - migration-alfresco-data

- name: Export HAS_EDU_SHARING_DOCKER_MIGRATION_PROCESSED=true to avoid multiple migration
  become: yes
  lineinfile:
    dest: "/etc/environment"
    state: present
    regexp: "^{{ item.key }}="
    line: "{{ item.key }}={{ item.value }}"
  with_items:
    - key: HAS_EDU_SHARING_DOCKER_MIGRATION_PROCESSED
      value: "true"